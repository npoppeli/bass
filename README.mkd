Bass
====

Bass is a static website generator (Bass=Build A Static Site). It turns a
collection of content pages, assets (PNG, CSS, JS etc.) and templates into a static
website, i.e. a website consisting only of directories, HTML pages and the same
assets. Bass is distributed under the MIT license (see the LICENSE file for
more details).

The idea is that you don't need a content-management system on the server to
generate page dynamically: you generate the content, upload it to the server,
and repeat this process when something has changed. That way, there is no need
to install complex software on the server, with the associated
maintenance effort (software upgrad, backup) and security issues.

The design of Bass borrows ideas from [Wok][wok] and other static site
generators (see [overview][static]). Before I created Bass, I used Wok for about a year,
created two websites with it, and also looked at alternatives.
During that year I noticed two drawbacks.

The first drawback of many static site generators is that they make assumptions about the
structure of the input directory and the names of files and directories (being designed primarily for blog sites).
Wok completely ignores the structure of the input directory, and uses the metadata of
the pages(category) to create the structure of the site tree.

The second drawback of Wok is that it lacks certain handy features.
Some examples of missing features are: flexible pagination, use of template engines other than Jinja,
ignoring certain files in the content directory (e.g. Emacs backup files).

Bass includes the features I missed in Wok and other static site generators.
More importantly: it considers the organization of the input directory as meaningful, and
preserves it in the site tree.
With organization of the input directory I mean: (1) the structure of the tree of files and
sub-directories in the input directory, and (2) the names of files and sub-directories.
This concept was borrowed from [Wintersmith][wintersmith].

[wok]: https://github.com/mythmon/wok
[static]: https://www.staticgen.com/
[wintersmith]: https://github.com/jnordberg/wintersmith

Documentation
-------------
Documentation is in the `doc` directory.
An example site is in the `test` directory.

Installation
------------
The recommended way to install Bass is from the [Python Package Index][pypi]
with this command: `sudo pip install bass`.

[pypi]: http://pypi.python.org/pypi

### Dependencies

All dependencies are available from pip. Although optional, you should at least
install one of the following three tools:

- Markdown (Markdown2 is even better)
- docutils
- Textile

If you install from pip, they will be installed for you.

#### Required

-   `pyyaml`
-   `chameleon`

#### Optional

-   `Markdown` or `Markdown2`, for rendering Markdown documents.
-   `docutils`, for rendering reStructuredText documents.
-   `Textile`, for rendering Textile documents.

Usage
-----

To use Bass, go to the directory where your site files will be located, and run
the command `bass -c`. This will create a basic directory structure and
corresponding configuration file. You can change the names of the directories,
provided you apply the changes in the configuration file as well.

Put your content in the input directory (default: `input`). Build the site with
`bass -b`. If you want to see debugging information, use `bass -b -d`.

If you want to start a web server after generating the site, use `bass -b -s`.
This will generate the site as usual, and then start an HTTP server (Python package 'waitress')
on port 8080. This test server is intended solely for local testing of the
site during development!

Configuration
-------------
Settings can be changed in the configuration file. This is the file `config` in
the project directory.

Possible configuration options (and their defaults) are

- `input` (`input`): collection of input files (pages and assets).
- `ignore` (`.?*`): patterns of files and directories to be ignored.
- `output` (`output`): collection of output files (the generated web site).
- `templates` (`templates`): collection of templates.
- `hooks` (`hooks`): Python module with hooks (see paragraph [Hooks](#hooks) for more information).

Creating a site
---------------

### Process

Bass is a tree transformation engine &#8211; no more, no less! The (site) tree is
generated from a set of files and directories in the input directory. The tree
can be transformed (optionally), and is then rendered as a set of files and
directories in the output directory.

The structure of the input directory, and the names of directories and files
are considered to express the semantics of the site. The structure and names
are maintained in the output directory (unless the user makes changes by using
hooks).

#### Generate site tree

The site tree is generated from the files in the input directory (default:
`input`). The site tree consists of nodes. There are three types of node:
*Folder*, *Page*, *Asset*. The details are explained below in the paragraph
[Content](#content).

During the process of building the site tree, directories and files are ignored
if their names match one of the *ignore patterns*. Symbolic links are also
ignored.  By default there is one ignore pattern: `.?*`. Other ignore patterns
can be defined in the configuration file (option `ignore`).

#### Transform site tree

Using *hooks* the site tree can be transformed. This step is optional: if the
post-build hook for the root of the tree (path `//`) is empty, there is no tree
transformation.

###  Render site tree

Rendering means writing the site tree to the output directory (default:
`output`). Rendering is defined as a series of actions, depending on the type of the node.

* Folder: call pre-render hook, create directory, render children, call post-render hook
* Page: call pre-render hook, write HTML file to path, render children, call post-render hook
* Asset: call pre-render hook, copy file from input to output directory, call post-render hook

The root node is not rendered: the output directory is assumed to exist when
you call `bass -b`.

### Content

All content of the site is in the input directory (default: `input`). Content
consists of folders, pages and assets (the term *asset* was borrowed from
[Jekyll][jekyll]).

[jekyll]: http://jekyllrb.com/

A directory is mapped to a folder in the site tree. A file is mapped to a page
or an asset in the site tree. A page is a file for which a converter exists. An
asset is a file for which no converter exists. In the most common case, pages
are text files with some form of markup, assets are images, CSS files and other
files.

Bass defines converters for plain text (extension `.txt`) and HTML fragments
(extension`.html`), and (provided the related Python packages are installed) for
Markdown (extensions `.md`, `.mkd`), ReStructuredText (extension `.rst`), and
Textile (extension `.txi`).

In other words: a file is mapped to a page if the extension of the file is in
the list of page types, usually `['.md', '.mkd', '.rst', '.txi', '.txt', '.html']`.
All other files are mapped to an asset.

#### Pages

The easiest way to write pages with formatting is to use lightweight markup
languages such as [Markdown][mkd], [reStructuredText][rst] and
[Textile][txi]. Markdown with extensions (e.g. tables) is possible if you
install the Markdown2 package.

It is also possible to write pages in HTML and in plain text. HTML pages are
not changed during the tree generation phase. Pages of plain text are converted
to very basic HTML by adding paragraph tags: each sequence of two or more line
breaks is treated as end of paragraph.

[mkd2]: https://github.com/trentm/python-markdown2
[mkd]: http://daringfireball.net/projects/markdown/
[rst]: http://docutils.sourceforge.net/rst.html
[txi]: https://github.com/sebix/python-textile

Each page can start with a metadata section in YAML form, but this is
optional. Suppose there is named `index.mkd` in the input directory, with the
following contents.

    title: Home
    ---
    This is the home page. Add useful text here.

This is a minimal Markdown page. The part above the divider `---` contains the metadata for
the page. Below the `---` is the content of the page.
The metadata section is not required. 

The content itself can also contain a line with `---`. The part between the first and
second divider is the preview, and the part below the second divider is the rest of
the text. The preview part can be used on a front page, for example, with
links to the complete page.

The basic set of metadata is this.

* title: title of the page (default: derived from the path of the file)
* tags: one or more words, separated by comma or space (default: empty list)
* skin: the name of the template used to render this page as a complete HTML file (default: `default`)
* id: an identifier of the node, which can be used in hooks (default: `''`)
* date, time, datetime: date, time and date-time in ISO notation; datetime can be derived
  from date and time, or vice versa (default: `ctime` of the file)

Other metadata fields can be defined in the header, and used in templates or hooks.

#### Assets

A file is mapped to an asset if the extension of the file is *not* in the list of
page types, usually `['.md', '.mkd', '.rst', '.txi', '.txt', '.html']`. An asset
is not changed during the tree generation phase.

#### Folders

A directory is mapped to a folder. A folder is not changed during the tree generation phase.

### Templates

The layout of the site is created by templates, which are collected in the
templates directory (default: `templates`). This is a flat directory,
i.e. sub-directories are not scanned. Bass uses [Chameleon][chameleon]
templates, with various variables exposed to build pages. This is a very
flexible templating environment with control flow, filters, and other features.

Chameleon Templates are XML files in the template directory. There should at
least be a template `default.xml`. Other files are ignored, unless other
template engines are defined.  It is possible to use other template languages,
e.g. Jinja. The template factory for an extra template language can be defined
in the *root pre-build hook* (see next paragraph).

[chameleon]: https://github.com/malthe/chameleon
[jinja]: http://jinja.pocoo.org/

### Hooks

Hooks are functions that are called before or after rendering a node.
The first type is called a pre-render hook, the second type a post-render
hook. Pre-render and post-render hooks can be defined for all nodes in the
tree. The node to which the hook is attached, is specified by its path or its
`id`.

    pre_hook['article/intro.mkd']    pre-render hook for node with path 'article/intro.mkd'
    post_hook['article/intro.mkd']   post-render hook for node with path 'article/intro.mkd'
    pre_hook['#intro']               pre-render hook for node(s) with id 'intro'
    post_hook['#intro']              post-render hook for node(s) with id 'intro'

There is one exception to the above: hooks attached to the root of the site
tree, identified by the path `//`, are not pre-render and post-render hooks,
since the root node is not rendered.

    pre_hook['//']                   pre-build hook
    post_hook['//']                  post-build hook

The pre-build hook is called before generating the site tree. The post-build
hook is called after building/generating the site tree.

Hooks are defined in the configuration file:

    hooks: hooks

#### Pre-render hooks

Table of contents (paginated).

#### Pre-build hooks

##### Define extra converter

    from bass import converter
    converter['.tex'] = tex2html # self-defined function tex2html()

###### Remove converter

    from bass import converter
    del converter['.txt'] # .txt files are assets

###### Other file extensions

    from bass import converter
    converter['.rest'] = converter['.rst'] # ReST file with another extension

##### Define extra templates engine

    from bass import template_factory
    template_factory['.jj2'] = jinja2.Template

#### Post-build hooks

Defining templates engines can also be done in the post-build hook (as long as
it is done *before* the rendering phase), but the main purpose of such a hook is
to transform the whole site tree. Please use your imagination, but don't break
the site tree (well: it's your tree anyway).