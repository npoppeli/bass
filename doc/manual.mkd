Bass
====

Bass is a static website generator (Bass=Build A Static Site). It turns a
collection of content pages, assets (PNG, CSS, JS etc.) and templates into a
static website, i.e. a website consisting only of directories, HTML pages and
the same assets. Bass is distributed under the MIT license (see the LICENSE
file for more details).

The idea is that you don't need a content-management system on the server to
generate pages dynamically: you generate the content, upload it to the server,
and repeat this process when something has changed. That way, there is no need
to install complex software on the server, with the associated maintenance
effort (software upgrade, backup) and security issues.

The design of Bass borrows ideas from [Wok][wok] and other static site
generators (see [overview][static]). Before I created Bass, I used Wok for
about a year, created two websites with it, and also looked at alternatives.
During that year I noticed several drawbacks, which led to the development of Bass.

The most important feature of Bass is that it gives the user complete freedom
in organizing the input directory, considers this organization as meaningful,
and therefore preserves it in the site tree.  With organization of the input
directory I mean: (1) the structure of the tree of files and sub-directories in
the input directory, and (2) the names of files and sub-directories. This
concept was borrowed from [Wintersmith][wintersmith]. Other static site
generators are designed primarily for blog sites, and use an input directory
with a fixed structure, or completely ignore the structure of the input
directory, creating the structure of the site tree from metadata (Wok for
example).

Other features that were added are: flexible pagination, use of template
engines other than Jinja, ignoring specified files in the content directory
(e.g. Emacs backup files).

[wok]: https://github.com/mythmon/wok
[static]: https://www.staticgen.com/
[wintersmith]: https://github.com/jnordberg/wintersmith

Documentation
-------------

Documentation is in the `doc` directory.
An example site is in the `test` directory.

Installation
------------

The recommended way to install Bass is from the [Python Package Index][pypi]
with this command: `sudo pip install bass`.

[pypi]: http://pypi.python.org/pypi

### Dependencies

All dependencies are available through pip. Although optional, you should at least
install one of the following three tools:

- Markdown (Markdown2 is an alternative)
- docutils
- Textile

If you install with pip, they will be installed for you.

#### Required

-   `pyyaml`
-   `chameleon`

#### Optional

-   `Markdown` or `Markdown2`, for rendering Markdown documents.
-   `docutils`, for rendering reStructuredText documents.
-   `Textile`, for rendering Textile documents.
-   `WebOb`, for a more advanced web server.
-   `waitress`, for a faster web server.

Usage
-----

To use Bass, go to the project directory (the directory where the input files
and generated site will be located), and run the command `bass -c` or `bass
--create`. This will create a basic directory structure and corresponding
configuration file. You can change the names of the directories, provided you
apply the changes in the configuration file as well.

Put your content in the input directory (default: `input`). Build the site with
`bass -b` or `bass --build`. If you want to see debugging information, use
`bass -b -d` or `bass --build --debug`.

If you add the option `-s` or `--serve`, Bass will generate the site as usual,
and then start a simple HTTP server on port 8080. This test server is intended solely
for local testing of the site during the development phase.

If the Python package `webob` is available, a slightly more advanced server
(WSGI) is made available. This server checks for changes to the `content` and
`layout` directories (see below) whenever a page is requested. If it detects a
change in either of these directories, the site is regenerated before the page
is returned.

Configuration
-------------

Settings can be changed in the configuration file. This is the file `config` in
the project directory.

Possible configuration options (and their defaults) are

- `input`   (`input`):   collection of input files (pages and assets).
- `ignore`  (`.?*`):     patterns of files and directories to be ignored.
- `output`  (`output`):  collection of output files (the generated web site).
- `layout`  (`layout`):  layout defined as a collection of templates.
- `handler` (`handler`): Python module with event handlers
  (see paragraph [Events](#events) for more information).

Creating a site
---------------

### Process

Bass is a tree transformation engine - no more, no less! The (site) tree is
generated from a set of files and directories in the input directory. The tree
can be transformed (optionally), and is then rendered as a set of files and
directories in the output directory.

The structure of the input directory, and the names of directories and files
are considered to express the semantics of the site. The structure and names
are maintained in the output directory (unless the user makes changes by using
event handlers).

#### Generate site tree

The site tree is generated from the files in the input directory (default:
`input`). The site tree consists of nodes. There are three types of node:
*Folder*, *Page*, *Asset*.
The tree model was inspired by [StrangeCase][strangecase].
The details are explained below in the paragraph [Content](#content).

[strangecase]: https://github.com/colinta/StrangeCase

During the process of building the site tree, directories and files are ignored
if their names match one of the *ignore patterns*. Symbolic links are also
ignored.  By default there is one ignore pattern: `.?*`. Other ignore patterns
can be defined in the configuration file (option `ignore`).

    ignore: "*.bak *~"

Note: the double quotes are required since `*` is a meta-character in YAML.

#### Transform site tree

Using *event handlers* the site tree can be transformed. This step is optional:
if there is no even handler for the events `generate:post:root` and
`render:pre:root`, there is no tree transformation.

###  Render site tree

Rendering means writing the site tree to the output directory (default:
`output`). Rendering is defined as a series of actions, depending on the type
of the node.

* *Folder*: send pre-render event(s), create directory, render children,
  send post-render event(s)
* *Page*: send pre-render event(s), write HTML file to path, render children,
  send post-render event(s)
* *Asset*: send pre-render event(s), copy file from input to output directory,
  send post-render event(s)

For the root node no directory is created: the output directory is assumed to
exist when you call `bass -b`.

### Content

All content of the site is in the input directory (default: `input`). Content
consists of folders, pages and assets (the term *asset* was borrowed from
[Jekyll][jekyll]).

[jekyll]: http://jekyllrb.com/

A directory is mapped to a folder in the site tree. A file is mapped to a page
or an asset in the site tree. A page is a file for which a generator exists. An
asset is a file for which no generator exists. In the most common case, pages
are text files with some form of markup, and assets are images, CSS files,
Javascript modules and other files.

Bass defines generators for plain text (extension `.txt`), HTML fragment
(extension`.html`), Markdown (extensions `.md`, `.mkd`), ReStructuredText
(extension `.rst`), and Textile (extension `.txi`). For Markdown,
ReStructuredText and Textile the related Python packages need to be installed
of course.

In other words: a file is mapped to a page if the extension of the file is in
the list of page types, usually `['.md', '.mkd', '.rst', '.txi', '.txt',
'.html']`.  All other files are mapped to an asset.

#### Pages

The easiest way to write pages with formatting is to use lightweight markup
languages such as [Markdown][mkd], [reStructuredText][rst] and
[Textile][txi]. Markdown is used with the extensions *definition list*,
*footnotes* and *tables*.

It is also possible to write pages in HTML and in plain text. HTML pages are
not changed during the tree generation phase. Pages of plain text are converted
to very basic HTML by adding paragraph tags: each sequence of two or more line
breaks is treated as end of paragraph.

[mkd2]: https://github.com/trentm/python-markdown2
[mkd]: http://daringfireball.net/projects/markdown/
[rst]: http://docutils.sourceforge.net/rst.html
[txi]: https://github.com/sebix/python-textile

Each page can start with a metadata section in YAML form, but this is
optional. Suppose there is named `index.mkd` in the input directory, with the
following contents.

    title: Home
    ---
    This is the home page. Add useful text here.

This is a minimal Markdown page. The part above the divider `---` contains the
metadata for the page. Below the `---` is the content of the page.  The
metadata section is not required.

The content itself can also contain a line with `---`. The part between the
first and second divider is the preview, and the part below the second divider
is the rest of the text. The preview part can be used on a front page, for
example, with links to the complete page.

The basic set of metadata is this.

* `title`: title of the page (default: derived from the path of the file)
* `tags`: one or more words, separated by comma or space (default: empty list)
* `skin`: the name of the template used to render this page as a complete HTML file (default: `default`)
* `id`: an identifier of the node, which can be used in event(s)s (default: `''`)
* `date`, `time`, `datetime`: date, time and date-time in ISO notation; datetime can be derived
  from date and time, or vice versa (default: `ctime` of the file)

Other metadata fields can be defined in the header, and used in templates or
event(s)s. The metadata defined in the header of the file are added as attributes
of the Page node.

#### Assets

A file is mapped to an asset if the extension of the file is *not* in the list
of page types, usually `['.md', '.mkd', '.rst', '.txi', '.txt', '.html']`. An
asset is not changed during the tree generation phase.

#### Folders

A directory is mapped to a folder. A folder is not changed during the tree
generation phase.

### Layout

The layout of the site is created by templates, which are collected in the
layout directory (default: `layout`). This is a flat directory,
i.e. sub-directories are not scanned. Bass uses [Chameleon][chameleon]
templates to create HTML pages. This is a very flexible templating environment
with control flow, filters, and other features. When a template is called, one
argument is passed, namely the current node.

Chameleon templates are XML files in the template directory. The possible file
extensions are `.xml` and `.pt`. Other files are ignored, unless additional
template engines are defined. There should at least be a template `default`.

It is possible to use other template languages, e.g. [Mako][mako] or
[Jinja][jinja]. The template factory for an extra template can be defined in
the event handler for `render:pre:root` (see the paragraph about events).

By default, there is one template factory: `chameleon.PageTemplateFile`. This is
connected to the file extensions `.xml` and `.pt`. Other template factories can
be defined, provided they implement the following protocol:

    extension -> template factory: T = template_factory[extension]
    filename -> template: t = T(filename)
    node -> string: t.render(this=node) is HTML page for node 'this'

[chameleon]: https://github.com/malthe/chameleon
[jinja]: http://jinja.pocoo.org/
[mako]: http://www.makotemplates.org/

### Tree model

The tree model consists of the following classes.

#### Node
* constructor Node(name, path, parent)
* methods:
  - Node.add(child): add `child` node to list of children of this node
  - Node.root(): return root node of tree
* variables:
  - Node.key: 'Node'
  - Node.id: identifier of this node (default: empty)
  - Node.name: name of node (last part of path)
  - Node.path: relative path of node in tree
  - Node.parent: parent node
  - Node.child: list of child nodes

#### Folder
* sub-class of Node
* methods:
  - Folder.asset(): ...
  - Folder.assets(): ...
  - Folder.folder(): ...
  - Folder.folders(): ...
  - Folder.page(): ...
  - Folder.pages(): ...
  - Folder.render(): ...
* variables: as in base class

####  Page
* sub-class of Node
* methods:
  - Page.render(): ...
  - Page.copy(): ...
* variables: as in base class, plus `preview`, `content`, `url`
  - `url`: absolute URL of page
  - `preview`: preview part of page (between first and second divider `---`)
  - `content`: content of page
* metadata of a page are added as attributes of the node

#### Asset
* sub-class of Node
* methods:
  - Asset.render(): ...
* variables: as in base class, plus `url`
  - `url`: absolute URL of asset

### Global parameters

Bass keeps global parameters in a separate module `setting`.

* `input`:            content directory
* `ignore`:           list of ignore patterns
* `layout`:           layout directory
* `output`:           output directory
* `handlers:          directory where event(s)s are defined
* `project`:          project directory, parent of input, layout, event(s) and output directories
* `event_handler`:    dictionary of event handler (key: extension, value: handler function)
* `template`:         dictionary of templates (key: name, value: template)
* `template_factory`: dictionary of template factories (key: extension, value: template factory)

### Events

An event is a signal that is emitted during the tree generation phase or the
tree rendering phase. An event can be handled by an event handler: a function
(actually: a callable object) that is called when the event signal is given.
There are three types of events: post-generate, pre-render and post-render
events. Events can be defined for all nodes in the tree. The node for which the
event signal is emitted, is specified by a its type and one of the following:
(1) (relative) path, (2) extension, (3) identifier (`id` attribute), (4) tag.

    generate:post:folder:path:articles       post-generate event for folder with path `articles`
    generate:post:page:extension:mkd         post-generate event for page with extension `.mkd`
    render:pre:page:path:article/intro.mkd   pre-render event for node with path `article/intro.mkd`
    render:post:page:path:article/intro.mkd  post-render event for node with path `article/intro.mkd`
    render:pre:page:id:intro                 pre-render event for node(s) with id `intro`
    render:post:page:id:intro                post-render event for node(s) with id `intro`
    render:pre:page:tag:table                pre-render event for node(s) with tag `table`
    render:post:page:tag:table               post-render event for node(s) with tag `table`
    render:post:asset:extension:png          post-generate event for asset(s) with extension `.png`

Events for the root of the site tree are specified as:

    generate:post:root                       post-generate event for root node
    render:pre:root                          pre-render event for root node
    render:post:root                         post-render event for root node

The post-render for the root node can be used for uploading the generated site to another server.
The post-build event for the root node is called after generating (building)
the site tree, and can be used for global transformations of the tree.

Event handlers are defined in the configuration file:

    handlers: handle_dir

From the specified directory (default: `handlers`) Bass attempts to read the
module `__init.py`. This module should define one or more event handlers,
usually in the form of functions, but actually any callable object is
acceptable. An event handler is called with one parameter, namely the node that
emitted the event.

Event handlers are are assigned to an event by calling the function `event_handler`:

    def upload_site(root):
        ....
    event_handler('render:post:root', upload_site)

For the following events Bass has built-in event handlers:

* `generate:post:page:extension:md`, `generate:post:page:extension:mkd`
  (provided Markdown or Markdown2 is installed)
* `generate:post:page:extension:rst` (provided RestructuredText is installed)
* `generate:post:page:extension:txi` (provided Textile is installed)
* `generate:post:page:extension:html`
* `generate:post:page:extension:txt`

#### Pre-render events

Table of contents (paginated).

    from bass import add_toc, event_handler
    def photo_toc(this):
        add_toc(this, this.parent.folder('photo').child, skin='photo_entry', size=20)
    pre = { 'photo.mkd': photo_toc }

#### Pre-build events

##### Define extra generator

    from bass import add_toc, event_handler
    from bass import generator
    def add_tex2html(node):
        generator:path:.tex'] = tex2html # self-defined function tex2html()
    pre = {'@': add_tex2html }

###### Remove generator

    del generator:path:.txt'] # .txt files are seen as assets

###### Other file extensions

    generator:path:.rest'] = generator['.rst'] # ReST file with another extension

##### Define extra template engine

    from bass import event_handler, template_factory
    from mako.template import Template
    def add_mako(node):
        template_factory['.mko'] = lambda name: Template(filename=name)
    event_handler('render:pre:root', add_mako)

#### Post-generate event

Defining template engines can be done in the post-generate event handler for
the root node, or in the pre-render event handler for the root - as long as it
is done *before* the rendering phase. Tthe main purpose of the event handler
for `generate:post:root` is to transform the whole site tree. Please use your
imagination, but don't break the site tree (well: it's your tree anyway).